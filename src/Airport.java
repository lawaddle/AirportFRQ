import java.util.ArrayList;

public class Airport
{
    /** A list of the flights into and out of this airport
     *  Guaranteed not to be null and to contain only non-null entries
     */
    private ArrayList<Flight> allFlights;

    public Airport(ArrayList<Flight> flights)
    {
        allFlights = flights;
    }

    public ArrayList<Flight> getAllFlights()
    {
        return allFlights;
    }

    /** Returns the revenue generated by all flights at the airport,
     *  as described in part (a)
     */
    public double getTotalRevenue()
    {
        double total = 0;
        for (Flight plain: allFlights) {
            double multi = 0;
            if (plain.getNumPassengers() > plain.getCapacity())
            {
                multi = plain.getCapacity();
            } else
            {
                multi = plain.getNumPassengers();
            }
            total+= (plain.getPrice()*multi);
        }
        return total;
    }

    /** Updates the list of flights by removing certain flights and
     *  returns the total number of passengers whose flights were removed,
     *  as described in part (b)
     */
    public int updateFlights()
    {
        int inPassing = 0;
        ArrayList<Flight> deadPlains = new ArrayList<>();
        for (int i = 0; i < allFlights.size(); i++) {
            if (allFlights.get(i).getNumPassengers() < (allFlights.get(i).getCapacity()*.2))
            {
              deadPlains.add(allFlights.get(i));
              allFlights.remove(i);
            }
        }
        for (Flight passed: deadPlains) {
            inPassing+=passed.getNumPassengers();
        }
        return inPassing;
    }
}